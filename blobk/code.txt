Code: 
*,
*::before,
*::after {
    box-sizing: border-box;
}
.container {
    max-width: 93.5rem;
    margin: 0 auto;
}
img {
    display: block;
}
.btn {
    display: inline-block;
    font: inherit;
    background: none;
    border: none;
    color: inherit;
    padding: 0;
    cursor: pointer;
}
.btn:focus {
    outline: 0.5rem auto #4d90fe;
}
.visually-hidden {
    position: absolute !important;
    height: 1px;
    width: 1px;
    overflow: hidden;
    clip: rect(1px, 1px, 1px, 1px);
}
/* Profile Section */

.profile {
    padding: 5rem 0;
    margin-top:-20px;
}
.profile::after {
    content: "";
    display: block;
    clear: both;
}
.profile-image {
    justify-content: center;
    align-items: center;
    margin-right: 3rem;
}

.profile-image img {
    border-radius: 50%;
}
.list-inline {
    display: flex;
    padding-left: 0;
    list-style: none;
    margin-bottom: -30px;
}
.profile-user-settings,
.profile-bio {
    float: left;
    width: calc(66.666% - 2rem);
}
.profile-stats{
  display: inline-grid;
  margin-top: 10px;
  margin-bottom: -20px;

}
.profile-user-settings {
    margin-top: 1.1rem;
    display: inline-grid;
}
.profile-user-name {
    font-size: 3.2rem;
    font-weight: 300;
    padding-left: 20px;
    margin-top: -20px;
    display: inline-flex;
}
.profile-edit-btn {
    font-size: 1.4rem;
    line-height: 1.8;
    border: 0.1rem solid #dbdbdb;
    border-radius: 0.3rem;
    padding: 0 2.4rem;
    margin-left: 2rem;
}
.profile-settings-btn {
    font-size: 2rem;
    margin-left: 1rem;
}



.profile-bio {
    font-size: 1.6rem;
    font-weight: 400;
    line-height: 1.5;
    margin-top: 2.3rem;
}

.profile-real-name,
.profile-stat-count,
.profile-edit-btn {
    font-weight: 600;
}




{% comment %}  {% endcomment %}
<div class="container pm">
		<div class="profile">
			<div class="profile-image">
      {% for i in profile %}
              <img src="{% thumbnail i.photo 180x180 %}" class="user-detail">
            <div class="profile-user-settings">
				      <h1 class="profile-user-name">{{ user.get_full_name }}</h1>
				      <a href="{% url "edit" %}"class="btn profile-edit-btn">Edit Profile</a>
				      <button class="btn profile-settings-btn" aria-label="profile settings"><i class="fas fa-cog" aria-hidden="true"></i></button>
		      	</div>
            <div class="profile-stats">
            <ul class="list-inline _3dehb">
              <li class="list-inline-item lh36i">
                {% with total_followers=user.followers.count %}
                 <span class="count">
                    <span class="profile-stat-count total">{{ total_followers }}</span>
                    <a href="{% url 'posts:friendship_followers' user.username%}">Follower{{ total_followers|pluralize }}</a>
                  </span> 
                {% endwith %}
              </li>
              
                <li class="list-inline-item lh36i">
                  {% with total_following=user.following.count %}
                    <span class="count">
                      <span class="profile-stat-count total1">{{ total_following }}</span>
                      <a href="{% url 'posts:friendship_following' user.username%}">Following{{ total_following|pluralize }}</a>
                    </span>
                  {% endwith %}
                </li>
                <li class="list-inline-item lh36i"><span class="profile-stat-count">{{total_post}}</span> Posts</li>
                <li class="list-inline-item lh36i">
                    <a href="{% url 'posts:user_follow' %}" data-id="{{ user.id }}" data-action="{% if request.user in user.followers.all %}un{% endif %}follow" class="follow button">
                    {% if request.user not in user.followers.all %}
                        Follow
                    {% else %}
                        Unfollow
                    {% endif %}
              </a>
                </li>
                </li>
              </ul>
			      </div>
          <div class="profile-bio">
				    <p>{{ i.bio |slice:'60'}}</p>
			    </div>
      {% endfor %}
      </div>
    </div>
  </div>
def trendingpostfunction():
    rdata = BlogPost_Model.objects.filter(date__gte=long_ago)
    likerate = []
    dislikerate = []
    viewrate = []
    for i in rdata:
        lr = i.post_like.count() + 1
        vr = i.post_views + 1
        lr = lr / vr
        likerate.append(lr)
        dr = i.post_dislike.count() + 1
        dr = dr / vr
        dislikerate.append(dr)
        u = User.objects.count()
        vrt = vr / u
        viewrate.append(vrt)
    lr1 = np.array(likerate)
    dr1 = np.array(dislikerate)
    vr1 = np.array(viewrate)
    lr = lr1.round(2)
    dr = dr1.round(2)
    vr = vr1.round(2)
    results = []
    for i in lr, dr, vr:
        a = (lr - dr) + vr
        a = a * 50
    rdata = BlogPost_Model.objects.filter(date__gte=long_ago)
    trendingdata = a
    j = 0
    trendingdict = {}
    for i in rdata:
        trendingdict[i.id] = trendingdata[j]
        j += 1
    trend = {k: v for k, v in sorted(trendingdict.items(), key=lambda item: item[1], reverse=True)}
    print('latest trending --', trend)
    trendlist = []
    for k in trend.keys():
        trendlist.append(k)
    #print('trendlist --', trendlist)
    return trendlist

latesttrend - trendingpostfunction()
trendingwithdata = []
temp =1
for i in latesttrend:
    obj = Post.objects.get(title=i)
    trendingwithdata.append(obj)
    temp +=1
trenddouble = trendingwithdata[:2]
trendfour = trendingwithdata[2:7]





{% load disqus_tags %}
    {% set_disqus_identifier "blogpost_" object.title %}
    {% set_disqus_title object.title %}
    {% disqus_show_comments %}
    <!-- disqus_dev -->

{% comment %} function getRandomColor() {
    var letters = '0123456789ABCDEF'.split('');
    var color = '#';
    for (var i = 0; i < 6; i++ ) {
        color += letters[Math.floor(Math.random() * 16)];
    }
    return color; }{% endcomment %}


Yes, there is, and its even named range.

Example

import datetime
start_date = datetime.date(2005, 1, 1)
end_date = datetime.date(2005, 3, 31)
User.objects.filter(last_login__range=(start_date, end_date))
Of for the last week

today = datetime.date.today()
last_week = today - datetime.timedelta(days=7)
User.objects.filter(last_login__range=(last_week, today))


A quick solution would be to simply add a day, so the date range includes up to the last minute of today, but not more (also update last_week).

today = datetime.date.today() + datetime.timedelta(days=1)
last_week = datetime.date.today() - datetime.timedelta(days=7)
User.objects.filter(last_login__range=(last_week, today))

Get List of Current Users
First off, this assumes that settings.py has the following:

SESSION_EXPIRE_AT_BROWSER_CLOSE = True

from django.contrib.auth.models import User
from django.contrib.sessions.models import Session
from django.utils import timezone

def get_current_users():
    active_sessions = Session.objects.filter(expire_date__gte=timezone.now())
    user_id_list = []
    for session in active_sessions:
        data = session.get_decoded()
        user_id_list.append(data.get('_auth_user_id', None))
    # Query all logged in users based on id list
    return User.objects.filter(id__in=user_id_list)

Now, you can use the function get_current_users() anywhere to get a QuerySet of users. This means that you can do things like:

queryset = get_current_users()
print(queryset)
print(queryset.exists())
print(queryset.count())



get_retained_users_per_month:

TODO: Describe

get_recovered_users_per_month:

TODO: Describe

get_churned_users_per_month:

TODO: Describe

get_monthly_active_users:

TODO: Describe

get_daily_active_users:

TODO: Describe

Django query User growth by month

from django.contrib.auth.models import User
from django.db.models import Count
from django.db.models.functions import TruncMonth


User.objects.all() \
    .annotate(month=TruncMonth("date_joined")) \
    .values("month") \
    .annotate(c=Count("id")) \
    .order_by("-month")